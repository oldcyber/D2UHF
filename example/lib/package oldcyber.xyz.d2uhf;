package oldcyber.xyz.d2uhf;

import androidx.annotation.NonNull;

import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.MethodChannel.MethodCallHandler;
import io.flutter.plugin.common.MethodChannel.Result;

import com.senter.iot.support.openapi.uhf.UhfD2;
import com.senter.iot.support.openapi.uhf.UhfD2.AccessPassword;
import com.senter.iot.support.openapi.uhf.UhfD2.Bank;
import com.senter.iot.support.openapi.uhf.UhfD2.UII;
import com.senter.iot.support.openapi.uhf.UhfD2.UmdErrorCode;
import com.senter.iot.support.openapi.uhf.UhfD2.UmdFrequencyPoint;
import com.senter.iot.support.openapi.uhf.UhfD2.UmdOnIso18k6cRead;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

import static oldcyber.xyz.d2uhf.DataTransfer.getBytesByHexString;
import static oldcyber.xyz.d2uhf.DataTransfer.xGetString;



/** D2uhfPlugin */
public class D2uhfPlugin implements FlutterPlugin, MethodCallHandler {

  public static String curData = "0";
  private MethodChannel channel;

  @Override
  public void onAttachedToEngine(@NonNull FlutterPluginBinding flutterPluginBinding) {
    channel = new MethodChannel(flutterPluginBinding.getBinaryMessenger(), "d2uhf");
    channel.setMethodCallHandler(this);
  }

  @Override
  public void onMethodCall(@NonNull MethodCall call, @NonNull final Result result) {
    if (call.method.equals("getTag")) {
      // --- Get Tag ---
      int ptr = 0;
      int cnt = 1;
      final Bank bank = Bank.ValueOf(1);

      UhfD2.getInstance().iso18k6cRead(getAccessPassword(), bank, ptr, cnt,
              new UmdOnIso18k6cRead() {
                @Override
                public void onFailed(UmdErrorCode error) {
                  curData = "0";
                  System.out.println("error:" + error.name());

                }
                @Override
                public void onTagRead(
                        int tagCount,
                        UII uii,
                        byte[] data,
                        UmdFrequencyPoint frequencyPoint,
                        Integer antennaId,
                        int readCount
                ) {
                  curData = xGetString(uii.getBytes());
                }
              });
      // --- Wait for tag reading ---
      try {
        TimeUnit.SECONDS.sleep(1);
      } catch (InterruptedException ie) {
      }
      if (curData == "0") {
        result.success("Метка не обнаружена!");
      } else {
        System.out.println(curData);
      result.success(curData);
      }
    } else
    if (call.method.equals("getPower")) {
      // --- init ---
//      boolean isSuccess1 = UhfD2.getInstance().init();
//      if (!isSuccess1) {
//        System.out.println("init failed");
//      }
      // --- Get power ---
      Integer power = UhfD2.getInstance().getOutputPower();
      if (power == null) {
        System.out.println("power get failed");
      }
      result.success(power);
    } else
    if (call.method.equals("onInit")) {
      // --- init ---
      boolean isSuccess = UhfD2.getInstance().init();
      if (!isSuccess) {
        System.out.println("init failed");
      }
      result.success(true);
    } else
    if (call.method.equals("setPower")) {
      /// --- Set power ---
      ///
      /// Parse the path from arguments
      final int newPower = call.argument("newPower");
      //System.out.println("power: " + newPower);
      /// Set New Power value
      Boolean isSuccess2 = UhfD2.getInstance().setOutputPower(newPower);
        if (!isSuccess2) {
          System.out.println("power set failed");
        }
      /// Success
        result.success(newPower);
    } else if (call.method.equals((""))) {
      
    } else
      {
      result.notImplemented();
    }
  }

  @Override
  public void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) {
    channel.setMethodCallHandler(null);
  }

  private static AccessPassword getAccessPassword() {
    String pwd = "00000000";
    pwd = pwd.replaceAll(" ", "");

    if (pwd.length() == 8) {
      byte[] bs = getBytesByHexString(pwd);
      if (bs == null || bs.length != 4) {
        return null;
      }
      return AccessPassword.getNewInstance(bs);
    }
    return null;
  }
}
